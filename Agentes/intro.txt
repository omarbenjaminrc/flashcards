¿Cuál es la definición fundamental de un agente impulsado por LLMs?	Es un sistema que <b>realiza tareas de forma independiente</b> en tu nombre, usando un Large Language Model (LLM).
¿Cómo se diferencian los agentes LLM del software tradicional en la ejecución de workflows?	El software tradicional ayuda a <i>optimizar</i> workflows (requiere tu interacción). Los agentes pueden <i>ejecutar</i> workflows <b>con un alto grado de independencia</b> por ti.
¿Qué característica clave diferencia un agente LLM de una aplicación LLM simple (como un chatbot básico)?	Un agente usa el LLM específicamente para <b>controlar y gestionar la ejecución del flujo de trabajo (workflow)</b>. Las aplicaciones simples solo integran LLMs pero no controlan workflows.
Menciona la primera característica fundamental de un agente (relacionada con su "cerebro" LLM).	Usa un LLM para <b>gestionar la ejecución del workflow y tomar decisiones</b>. Sabe cuándo el workflow está completo, puede corregir sus acciones y detenerse si falla.
Menciona la segunda característica fundamental de un agente (relacionada con sus "manos y ojos").	Tiene acceso a <b>varias herramientas</b> para interactuar con sistemas externos (obtener datos, tomar acciones) y las <b>selecciona dinámicamente</b>, operando dentro de guardrails.
En general, ¿cuándo son los agentes LLM más adecuados que la automatización tradicional?	Cuando los métodos tradicionales (deterministas, basados en reglas) <b>se quedan cortos</b>, especialmente en workflows donde el juicio matizado, el contexto o la ambigüedad son clave.
Nombra un tipo de workflow donde construir un agente es útil (relacionado con decisiones complejas).	Workflows con <b>toma de decisiones compleja</b> (juicio matizado, manejo de excepciones, decisiones sensibles al contexto). Ej: aprobación de reembolsos.
Nombra otro tipo de workflow donde construir un agente es útil (relacionado con reglas difíciles de mantener).	Sistemas con **reglas difíciles de mantener** (enrevesadas, costosas de actualizar, propensas a errores). Ej: revisión de seguridad de proveedores.
Nombra un tercer tipo de workflow donde construir un agente es útil (relacionado con datos no estructurados).	Scenarios con <b>alta dependencia de datos no estructurados</b> (interpretar lenguaje natural, extraer de documentos, interacción conversacional). Ej: procesar reclamos de seguro.
Antes de empezar a construir un agente, ¿qué paso clave deberías dar con tu caso de uso?	<b>Validar que cumpla claramente los criterios</b> (decisiones complejas, reglas difíciles, datos no estructurados). Si no, una solución determinista podría ser suficiente.