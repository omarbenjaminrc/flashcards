¿Cuál es el propósito principal de personalizar el admin de Django?;Mejorar la <b>usabilidad</b> y <b>eficiencia</b> de las interfaces de administración por defecto, adaptándolas a las necesidades específicas de la aplicación.
¿Cómo se personalizan las opciones de administración para un modelo específico en Django?;Creando una clase que herede de <code>django.contrib.admin.ModelAdmin</code> y pasándola como segundo argumento al registrar el modelo: <code>admin.site.register(Modelo, MiClaseModelAdmin)</code>.
¿Qué atributo de <code>ModelAdmin</code> se usa para reordenar o seleccionar los campos que aparecen en el formulario de edición/creación?;El atributo <code>fields</code>, asignándole una lista de nombres de campo en el orden deseado. Ej: <code>fields = ["pub_date", "question_text"]</code>.
¿Qué atributo de <code>ModelAdmin</code> permite agrupar campos en secciones dentro del formulario de edición/creación?;El atributo <code>fieldsets</code>. Se le asigna una lista de tuplas, donde cada tupla es <code>(Titulo_Seccion, {'fields': ['campo1', 'campo2']})</code>. Un título <code>None</code> oculta el encabezado de la sección.
¿Cómo se pueden editar modelos relacionados (ej. Choices de una Question) directamente en la página de administración del modelo principal?;Utilizando <b>Inlines</b>. Se define una clase que herede de <code>admin.StackedInline</code> o <code>admin.TabularInline</code> y se añade a la lista <code>inlines</code> del <code>ModelAdmin</code> principal.
¿Cuáles son los dos tipos principales de clases Inline en el admin de Django y cuál es su diferencia visual?;<code>admin.StackedInline</code> (muestra campos apilados verticalmente, ocupa más espacio) y <code>admin.TabularInline</code> (muestra campos en una tabla compacta, más eficiente en espacio, incluye columna "Delete?").
¿Qué atributos clave se deben definir dentro de una clase Inline (ej. <code>ChoiceInline</code>)?;<code>model = MiModeloRelacionado</code> (ej. <code>model = Choice</code>) y opcionalmente <code>extra = N</code> (para indicar cuántos formularios vacíos mostrar por defecto, ej. <code>extra = 3</code>).
¿Se debe registrar el modelo relacionado (ej. Choice) con admin.site.register() si se va a usar como Inline en otro modelo (ej. Question)?;<b>No</b>, si se va a usar como Inline, el modelo relacionado no debe registrarse por separado.
¿Qué atributo de <code>ModelAdmin</code> se usa para controlar qué columnas se muestran en la página de lista de cambios (change list)?;El atributo <code>list_display</code>. Se le asigna una lista de nombres de campo o métodos a mostrar. Ej: <code>list_display = ["question_text", "pub_date"]</code>.
¿Cómo se puede mejorar la visualización (ej. cabecera, ordenación, icono booleano) de un método de modelo mostrado en <code>list_display</code>?;Usando el decorador <code>@admin.display(...)</code> directamente sobre la definición del método en el archivo <code>models.py</code>.
¿Qué opciones comunes se pueden configurar con el decorador <code>@admin.display()</code>?;<code>boolean=True</code> (muestra iconos para booleanos), <code>ordering='nombre_campo'</code> (permite ordenar por un campo del modelo), <code>description='Texto Cabecera'</code> (personaliza el título de la columna).
¿Qué atributo de <code>ModelAdmin</code> añade una barra lateral de filtros a la página de lista de cambios?;El atributo <code>list_filter</code>. Se le asigna una lista de nombres de campo por los cuales se podrá filtrar. Ej: <code>list_filter = ["pub_date"]</code>.
¿Qué atributo de <code>ModelAdmin</code> añade una caja de búsqueda en la parte superior de la página de lista de cambios?;El atributo <code>search_fields</code>. Se le asigna una lista de nombres de campo de texto en los que buscará (usando consultas <code>LIKE</code>). Ej: <code>search_fields = ["question_text"]</code>.
¿Cuál es el método principal para personalizar la apariencia global del sitio de administración (ej. el título "Django administration")?;<b>Sobrescribiendo</b> las plantillas del admin por defecto de Django.
¿Cuál es la estructura de directorios recomendada para sobrescribir plantillas del admin a nivel de proyecto?;1. Crear un directorio <code>templates/</code> en la raíz del proyecto.<br>2. Configurar <code>'DIRS': [BASE_DIR / 'templates']</code> en <code>settings.py</code>.<br>3. Crear un subdirectorio <code>admin/</code> dentro de <code>templates/</code> (<code>miproyecto/templates/admin/</code>).<br>4. Copiar la plantilla original (ej. <code>base_site.html</code>) de la fuente de Django a este directorio y modificarla.
¿Qué plantilla del admin se debe sobrescribir para cambiar elementos base como el encabezado del sitio?;<code>admin/base_site.html</code>. Se copia a <code>tu_proyecto/templates/admin/</code> y se edita. (Alternativa simple para el header: atributo <code>AdminSite.site_header</code>).
¿Qué plantilla del admin se debe sobrescribir para personalizar la página principal del índice del admin?;<code>admin/index.html</code>. Se copia a <code>tu_proyecto/templates/admin/</code> y se modifica, usualmente alterando cómo se usa la variable <code>app_list</code>.
¿Qué significa la configuración <code>APP_DIRS = True</code> en <code>settings.py</code> respecto a las plantillas?;Significa que Django buscará automáticamente un subdirectorio <code>templates/</code> dentro de cada aplicación listada en <code>INSTALLED_APPS</code> como fuente secundaria de plantillas (después de los directorios en <code>DIRS</code>). Así es como encuentra las plantillas por defecto del admin (<code>django.contrib.admin</code> es una app).