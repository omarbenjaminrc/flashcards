En un <form> HTML, ¿qué indica el atributo action?;La URL a la cual se enviarán los datos del formulario cuando se envíe.
¿Por qué es fundamental usar method="post" en un <form> HTML que modifica datos en el servidor?;Es una práctica web estándar de seguridad y semántica. Indica que la acción resultante del envío cambiará el estado del servidor (ej: guardar datos, borrar, actualizar). GET es para recuperar datos sin efectos secundarios.
¿Qué template tag es obligatorio incluir dentro de cualquier <form> Django que use method="post" para URLs internas?;{% csrf_token %}
¿Contra qué tipo común de ataque web protege el tag {% csrf_token %} en los formularios POST de Django?;CSRF (Cross-Site Request Forgery - Falsificación de Peticiones en Sitios Cruzados).
En una vista Django, ¿cómo accedes a los datos enviados a través de un formulario con method="post"?;Usando el objeto similar a diccionario request.POST. Ej: valor = request.POST['nombre_del_campo'].
¿Qué tipo de dato son siempre los valores recuperados de request.POST (y request.GET)?;Son siempre strings (cadenas de texto). Necesitarás convertirlos si esperas números, etc.
Si intentas acceder a request.POST['clave_inexistente'] y esa clave no fue enviada en el formulario, ¿qué excepción de Python se lanzará?;KeyError.
Escenario: Un usuario envía un formulario de votación sin seleccionar ninguna opción llamada 'choice'. ¿Qué debería hacer idealmente la vista vote?;Detectar la ausencia de request.POST['choice'] (mediante try...except KeyError) y volver a mostrar el formulario de votación (detail.html) con un mensaje de error claro.
Después de procesar exitosamente datos de un formulario POST que modifican el estado (ej: guardar un voto), ¿qué tipo de respuesta HTTP es crucial que la vista retorne?;Un HttpResponseRedirect.
¿Por qué es una práctica esencial devolver un HttpResponseRedirect después de un POST exitoso? (Patrón PRG);Para evitar el reenvío accidental de datos si el usuario actualiza la página o usa el botón "Atrás" del navegador (sigue el patrón Post/Redirect/Get).
¿Qué función de django.urls te permite generar una URL dinámicamente dentro de una vista basándose en el name de una URL y sus argumentos, evitando hardcodear?;La función reverse().
Sintaxis: ¿Cómo usarías reverse() dentro de una vista para obtener la URL de la vista con name='results' en el namespace polls, pasándole question.id como argumento?;reverse('polls:results', args=(question.id,))
¿Qué objeto (django.db.models...) se utiliza para realizar actualizaciones atómicas en la base de datos basadas en el valor actual del campo en la DB?;La expresión F(). Ej: F('nombre_campo').
¿Por qué es preferible usar mi_objeto.votes = F('votes') + 1 en lugar de mi_objeto.votes += 1; mi_objeto.save() para incrementar un contador en una vista web?;F() realiza la operación directamente en la base de datos, lo que ayuda a prevenir race conditions (condiciones de carrera) si múltiples peticiones intentan actualizar el mismo objeto simultáneamente. La segunda forma lee, modifica en Python y luego escribe, creando una ventana para conflictos.
¿Cuál es el principal propósito del sistema de Vistas Genéricas (Generic Views) de Django?;Reducir código repetitivo (boilerplate) para patrones comunes de desarrollo web (como mostrar listas o detalles de objetos), abstrayendo la lógica común.
¿Qué patrones comunes abstraen las vistas genéricas ListView y DetailView respectivamente?;ListView: Mostrar una lista de objetos.<br>DetailView: Mostrar una página de detalle para un objeto específico.
Al usar una Vista Basada en Clase (CBV) genérica en urls.py, ¿qué método debes llamar sobre la clase para obtener la función de vista real?;El método .as_view(). Ej: path('', views.IndexView.as_view(), name='index').
Por defecto, ¿cómo espera la vista genérica DetailView que se llame el parámetro capturado en la URL que representa la clave primaria del objeto?;Espera que se llame pk. Ej: path('<int:pk>/', ...)
En una vista genérica basada en clase (ej: DetailView), ¿cómo especificas sobre qué Modelo Django actuará la vista?;Usando el atributo de clase model. Ej: model = Question.
¿Cómo puedes indicar a una vista genérica que use una plantilla HTML específica en lugar de la que Django generaría por defecto (ej: <app>/<model>_detail.html)?;Estableciendo el atributo de clase template_name. Ej: template_name = "polls/mi_template_especifico.html".
Por defecto, ¿cuál es el nombre de la variable de contexto que contiene la lista de objetos en una ListView?;<nombre_modelo_en_minusculas>_list. Ej: question_list si model = Question.
¿Cómo puedes cambiar el nombre de la variable de contexto por defecto en una ListView (ej: de question_list a latest_question_list)?;Estableciendo el atributo de clase context_object_name. Ej: context_object_name = "latest_question_list".
Si necesitas personalizar qué objetos se muestran en una ListView (ej: filtrar por fecha, ordenar de forma específica), ¿qué método puedes definir dentro de tu clase IndexView(generic.ListView)?;El método get_queryset(self).
¿Qué debe devolver el método get_queryset(self) en una ListView personalizada?;Debe devolver un QuerySet de Django con los objetos deseados.