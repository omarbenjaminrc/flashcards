#separator:;
#html:true
¿Cuáles son los <b>tres bloques de construcción</b> fundamentales de Linux que los contenedores aprovechan?;<ol><li><b>Cgroups (Control Groups):</b> Para limitar y monitorear recursos.</li><li><b>Namespaces (Espacios de Nombres):</b> Para aislamiento de recursos.</li><li><b>Union Filesystems:</b> Para eficiencia en imágenes en capas.</li></ol>
¿Qué son los <b>cgroups</b> en Linux y cuál es su <b>propósito principal</b> para los contenedores?;Son una característica del kernel para agrupar procesos y <b>limitar/monitorear su uso de recursos</b> (CPU, memoria, I/O). <b>Propósito:</b> Evitar que un contenedor acapare recursos y asegurar reparto justo.
¿Qué son los Linux <b>namespaces</b> y cómo proporcionan <b>aislamiento</b> para los contenedores?;Envuelven recursos globales del sistema (PIDs, red, usuarios, etc.) para que los procesos dentro del namespace crean tener su <b>propia instancia aislada</b> de dicho recurso, ocultando el resto del sistema.
¿Qué son los <b>Union Filesystems</b> y cuáles son sus <b>beneficios clave</b> para las imágenes de contenedor?;Permiten <b>superponer directorios (capas)</b> transparentemente. <b>Beneficios:</b><ul><li><b>Eficiencia de espacio:</b> Capas base comunes se comparten, no se duplican.</li><li><b>Eficiencia de tiempo:</b> Construir/compartir es rápido (solo se mueven capas nuevas/modificadas) contenedores usan "thin writable layer".</li></ul>
¿Docker <b>inventó</b> la tecnología de contenedores? ¿Cuál fue su principal contribución?;No (ej. LXC es anterior). La principal contribución de Docker fue empaquetar las tecnologías subyacentes con una <b>excelente Experiencia de Usuario (Developer Experience - DX)</b>, lo que impulsó su adopción masiva.
¿Qué es <b>Docker Desktop</b> en términos generales?;Es la aplicación principal que se instala en máquinas de desarrollo (Win/Mac/Linux), proporcionando una <b>interfaz de usuario completa (Cliente: CLI/GUI)</b> y gestionando el entorno Docker subyacente (a menudo mediante una VM ligera en Win/Mac).
Describe la <b>arquitectura básica</b> de Docker: ¿Cómo interactúan el <b>Cliente</b> y el <b>Daemon (`dockerd`)</b>?;El <b>Cliente</b> (CLI o GUI) envía comandos a través de la <b>API de Docker</b> al <b>Docker Daemon (`dockerd`)</b>. El Daemon es el servicio en segundo plano que gestiona los objetos Docker (contenedores, imágenes, volúmenes, redes).
¿Cuál es la diferencia clave entre <b>Docker Engine</b> y <b>Docker Desktop</b>?;<b>Docker Engine:</b> Es el núcleo FOSS (Daemon, API, CLI), instalable <b>solo en Linux</b>. <br><b>Docker Desktop:</b> Es el producto completo (incluye Engine), añade GUI, helpers, gestión de VM (en Win/Mac) y otras mejoras de DX para múltiples SO.
¿Cuál es el rol de un <b>Container Registry</b> (ej., Docker Hub) en el ecosistema de contenedores?;Su función es <b>almacenar y compartir (distribuir) imágenes de contenedores</b>. Son servicios externos, técnicamente no forman parte del software Docker Engine/Desktop.