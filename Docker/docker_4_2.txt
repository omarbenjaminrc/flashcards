#separator:;
#html:true
¿Cuáles son las principales <b>motivaciones</b> para usar imágenes de contenedores de <b>terceros</b> (pre-construidas)?;<ul><li>Ahorrar tiempo/esfuerzo reutilizando trabajo existente.</li><li>Simplificar la instalación/configuración de software complejo.</li><li>Obtener entornos consistentes y reproducibles.</li></ul>
¿Cuáles son las <b>tres categorías principales</b> de casos de uso para contenedores de terceros mencionadas?;<ol><li><b>Bases de Datos</b> (Postgres, Mongo, etc.)</li><li><b>Entornos de Prueba Interactivos</b> (OS específicos, runtimes de lenguajes)</li><li><b>Utilidades de Línea de Comandos (CLI)</b> (jq, yq, AWS CLI, etc.)</li></ol>
¿Qué <b>beneficios clave</b> ofrecen los contenedores para ejecutar <b>bases de datos</b> en desarrollo/pruebas?;<ul><li>Evitan instalaciones complejas y dependientes del SO/versión.</li><li>Permiten cambiar fácilmente entre versiones (modificando el <i>tag</i> de la imagen).</li><li>Facilitan la creación rápida de bases de datos limpias.</li></ul>
¿Cuál es la consideración <b>más crítica</b> al ejecutar bases de datos en contenedores y cómo se aborda?;La <b>persistencia de los datos</b>. Se aborda identificando la ruta de datos de la BD y montando un <b>Volume Docker</b> (<code>-v nombre-volumen:/ruta/datos/db</code>) en esa ubicación.
Al usar volúmenes para persistir datos de bases de datos en contenedores, ¿qué <b>advertencia crucial</b> NUNCA se debe olvidar?;Usar volúmenes <b>NO sustituye la necesidad de realizar y probar BACKUPS (copias de seguridad)</b> regulares de los datos importantes. La configuración de backups es específica de cada base de datos.
¿Cómo se suelen gestionar los <b>archivos de configuración personalizados</b> (ej. <code>postgresql.conf</code>) para bases de datos en contenedores?;Creando el archivo en el sistema <b>host</b> y usando un <b>Bind Mount</b> (<code>-v /ruta/host/config.conf:/ruta/contenedor/config.conf</code>) para inyectarlo en la ubicación esperada dentro del contenedor. A menudo requiere pasar un argumento extra al comando de inicio para que use ese archivo.
Además de los archivos de configuración, ¿cómo se configuran a menudo las bases de datos en contenedores (ej. para contraseñas iniciales)?;Mediante <b>Variables de Entorno</b> pasadas con la opción <code>-e</code> (ej. <code>-e POSTGRES_PASSWORD=secret</code>, <code>-e MONGO_INITDB_ROOT_PASSWORD=secret</code>). Consultar la documentación de la imagen específica.
¿Para qué se usan contenedores de terceros como <b>Entornos de Prueba Interactivos</b>?;Para obtener rápidamente un <b>shell interactivo</b> (<code>docker run -it --rm ...</code>) dentro de un sistema operativo específico (Ubuntu, Alpine) o con un runtime de lenguaje concreto (Python, Node) sin instalar nada en el host.
¿Cuáles son los <b>beneficios</b> de ejecutar <b>Utilidades CLI</b> (como jq, yq, sed, AWS CLI) dentro de contenedores?;<ul><li>Usar versiones específicas sin instalarlas/afectarlas en el host.</li><li>Asegurar consistencia de comportamiento entre diferentes SO (ej. GNU vs macOS).</li><li>Ejecutar herramientas no instaladas localmente.</li></ul>
¿Cómo interactúan típicamente los contenedores de <b>Utilidades CLI</b> con los datos o el entorno del host?;<ul><li>Reciben entrada a través de <b>pipes</b> (<code>echo ... | docker run -i ...</code>).</li><li>Leen/escriben archivos del host usando <b>Bind Mounts</b> (<code>-v ${PWD}:/workdir ...</code>).</li><li>Acceden a credenciales/config del host usando <b>Bind Mounts</b> (<code>-v ~/.aws:/root/.aws ...</code>).</li></ul>
¿Cómo se puede mejorar la <b>ergonomía</b> al usar frecuentemente una utilidad CLI desde un contenedor?;Creando <b>funciones de shell</b> o <b>alias</b> en el sistema host que encapsulen el comando <code>docker run</code> completo, haciendo que su uso sea más transparente y parecido a ejecutar un comando local.