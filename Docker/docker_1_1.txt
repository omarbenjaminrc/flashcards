¿Cuáles son los <b>dos aspectos principales</b> del ciclo de vida del software que los contenedores buscan solucionar?;<b>1. Desarrollo:</b> Simplificar la configuración compleja y propensa a errores de los entornos. <br><b>2. Despliegue:</b> Simplificar el proceso de llevar la aplicación a producción.
¿Cuáles eran los <b>desafíos históricos</b> al configurar un entorno de <b>desarrollo</b> sin contenedores?;Era un proceso: <ul><li><b>Complejo:</b> muchas instalaciones manuales.</li><li><b>Propenso a errores:</b> fácil equivocarse.</li><li><b>Inconsistente:</b> diferencias entre Windows, Mac, Linux ('funciona en mi máquina').</li></ul>
¿Qué problema común causaba la <b>inconsistencia</b> entre entornos de desarrollo?;El problema de "funciona en mi máquina, pero no en la tuya".
¿Cuáles eran los <b>desafíos históricos</b> al realizar el <b>despliegue</b> de aplicaciones sin contenedores?;Implicaba varios pasos manuales, lentos y propensos a errores: <ul><li>Crear/configurar servidor.</li><li>Instalar <b>dependencias</b>.</li><li>Copiar el código de la aplicación.</li></ul>
¿Qué son las <b>dependencias</b> en el contexto del despliegue de software?;Son otros programas o librerías que la aplicación principal necesita para funcionar correctamente.
¿Cómo <b>simplifican</b> los contenedores (ej. Docker) la configuración del entorno de <b>desarrollo</b>?;Permiten definir el entorno en un archivo y crearlo con un comando simple (ej. <code>docker-compose up</code>), asegurando consistencia entre diferentes sistemas operativos (Windows, Mac, Linux).
¿Cuál es la <b>relevancia</b> de usar contenedores para simplificar el <b>desarrollo</b>?;Elimina las frustrantes diferencias entre entornos y asegura que todos los desarrolladores trabajen con la misma configuración base.
¿Cómo <b>simplifican</b> los contenedores el proceso de <b>despliegue</b>?;Introducen un <b>paquete estandarizado</b> (Imagen de Contenedor) que contiene todo lo necesario, reduciendo los pasos del despliegue.
¿Qué es una <b>Imagen de Contenedor</b> (Container Image)?;Es un paquete <b>ligero, autónomo y ejecutable</b> que incluye todo lo necesario para correr una aplicación: código, librerías, herramientas, dependencias y configuración. Es como una "plantilla" lista para funcionar.
¿Qué se necesita mínimamente en un servidor para <b>desplegar</b> una aplicación usando contenedores?;Solo se requiere: <br>1. Un <b>Entorno de Ejecución de Contenedores</b> (Container Runtime), como Docker. <br>2. La <b>Imagen del Contenedor</b> de la aplicación.
¿Cuál es la <b>relevancia</b> de usar contenedores para simplificar el <b>despliegue</b>?;Hace el proceso mucho más <b>rápido, repetible y fiable</b> al reducir pasos manuales y estandarizar el paquete.
¿Cuál es el beneficio clave de los contenedores relacionado con la <b>complejidad</b>?;<b>Simplicidad:</b> Reducen la complejidad tanto en la configuración de entornos de desarrollo como en el despliegue de aplicaciones.
¿Cuál es el beneficio clave de los contenedores relacionado con los <b>errores</b>?;<b>Confiabilidad:</b> Minimizan los errores derivados de configuraciones manuales inconsistentes o pasos olvidados.
¿Cuál es el beneficio clave de los contenedores relacionado con los <b>entornos</b>?;<b>Consistencia:</b> Aseguran que el entorno de desarrollo sea lo más parecido posible al entorno de producción.
¿Qué problema clásico resuelve el beneficio de <b>Consistencia</b> de los contenedores?;Resuelve el problema de "en mi máquina funciona".
¿Cuál es el beneficio clave de los contenedores relacionado con el <b>empaquetado</b>?;<b>Estandarización:</b> Proporcionan un formato estándar (la imagen) para empaquetar, distribuir y ejecutar software.
¿Por qué razón principal los contenedores se han vuelto <b>dominantes</b> en el desarrollo de software?;Porque abordan problemas fundamentales de <b>inconsistencia y complejidad</b> en el ciclo de vida del software.
¿Cuál es el <b>impacto final</b> del uso de contenedores en la entrega de software?;Hacen que el proceso de crear y entregar aplicaciones sea mucho más <b>eficiente, rápido y seguro</b>.
¿Qué herramienta popular se menciona como ejemplo de plataforma de contenedores?;<b>Docker</b>.
¿Qué comando de ejemplo se menciona para levantar un entorno de desarrollo definido con Docker Compose?;<code>docker-compose up</code>
¿Cuál es la analogía utilizada en el resumen para describir un contenedor?;Una "caja" ligera que contiene todo lo necesario para que una aplicación funcione.
¿Qué se requiere para ejecutar un contenedor a partir de una Imagen de Contenedor?;Un <b>Entorno de Ejecución de Contenedores</b> (Container Runtime).