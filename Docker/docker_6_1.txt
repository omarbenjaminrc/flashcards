#separator:;
#html:true
¿Qué es un <b><code>Dockerfile</code></b>?;Es un archivo de texto plano que actúa como una <b>receta o plano</b>, conteniendo todas las instrucciones (comandos) necesarias para ensamblar una imagen de contenedor de forma automatizada y reproducible.
¿Cuál es el <b>propósito principal</b> de un <code>Dockerfile</code>?;Definir paso a paso todo lo que incluirá la imagen: sistema operativo base, instalación de dependencias, configuración del entorno y el comando para iniciar la aplicación.
¿Qué es el <b>Contexto de Construcción (Build Context)</b> en Docker?;Es el conjunto de archivos y directorios (normalmente la carpeta del proyecto con el código fuente) en tu sistema local (o una URL) que Docker necesita tener disponibles <i>durante</i> el proceso de construcción de la imagen (ej. para usar con <code>COPY</code>).
¿Cómo interactúan el <code>Dockerfile</code> y el <b>Contexto de Construcción</b>?;El <code>Dockerfile</code> a menudo usa la instrucción <code>COPY</code> para copiar archivos <i>desde</i> el contexto de construcción <i>hacia</i> la imagen que se está creando. Todo el contexto se envía al daemon Docker antes de iniciar la construcción.
¿Qué es y para qué sirve el archivo <b><code>.dockerignore</code></b>?;Es un archivo de texto en la raíz del contexto de construcción que lista archivos/directorios a <b>ignorar</b>. <b>Propósito:</b> Evitar enviar archivos innecesarios/sensibles al daemon, acelerar la construcción, prevenir conflictos y problemas de seguridad.
¿Cuál es la sintaxis básica para escribir instrucciones en un <code>Dockerfile</code>?;<ul><li>Los comentarios empiezan con <code>#</code>.</li><li>Las instrucciones van en <b>MAYÚSCULAS</b>, seguidas de sus argumentos (ej: <code>RUN apt-get update</code>).</li></ul>
¿Qué especifica la instrucción <b><code>FROM</code></b> en un Dockerfile y por qué es obligatoria?;Especifica la <b>imagen base</b> sobre la cual se construirá la nueva imagen (ej. <code>FROM ubuntu:22.04</code>). Es obligatoria porque toda imagen necesita un punto de partida.
¿Qué hace la instrucción <b><code>RUN</code></b> en un Dockerfile?;Ejecuta un comando <b>durante la fase de construcción</b> de la imagen. Se usa típicamente para instalar paquetes, crear directorios, compilar código, etc. Cada <code>RUN</code> crea una nueva capa en la imagen.
¿Qué hace la instrucción <b><code>COPY</code></b> en un Dockerfile?;Copia archivos o directorios desde el <b>contexto de construcción</b> (tu máquina) hacia el sistema de archivos de la <b>imagen</b> que se está creando.
¿Qué especifica la instrucción <b><code>CMD</code></b> en un Dockerfile?;Proporciona el <b>comando por defecto</b> que se ejecutará cuando un contenedor se inicie <i>a partir</i> de esa imagen. (Puede ser sobrescrito por el comando pasado a <code>docker run</code>).
¿Cuál es la función del comando <b><code>docker build</code></b>?;Lee un <code>Dockerfile</code>, utiliza el contexto de construcción especificado y ejecuta los pasos para <b>producir/ensamblar la imagen de contenedor final</b>.
En el comando <code>docker build -f Dockerfile .</code>, ¿qué significan <code>-f Dockerfile</code> y el punto final <code>.</code>?;<code>-f Dockerfile</code> especifica el nombre del archivo Dockerfile a usar (opcional si se llama exactamente "Dockerfile"). <br>El punto <code>.</code> indica que el <b>contexto de construcción</b> es el <b>directorio actual</b>.
Describe el flujo general del proceso de construcción de imágenes Docker.;Se define una receta en un <b><code>Dockerfile</code></b>, se prepara el <b>Contexto de Construcción</b> (archivos del proyecto, filtrados por <b><code>.dockerignore</code></b>), y se ejecuta <b><code>docker build [contexto]</code></b> para que Docker ensamble la imagen final siguiendo las instrucciones.